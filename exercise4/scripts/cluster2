#!/usr/bin/env python
import roslib

roslib.load_manifest('exercise4')
import rospy
import numpy as np
from geometry_msgs.msg import Point, Vector3, Pose
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
from sklearn.cluster import MiniBatchKMeans


class Clusterer():

    def __init__(self):
        rospy.init_node('cluster2')
        self.num_clusters = rospy.get_param('~num_clusters')
        self.data_points = []
        self.unfitted_data_points = []
        self.current_center_index = 0
        self.kmeans = MiniBatchKMeans(n_clusters=self.num_clusters, random_state=0)

        self.num_jobs_handled = 0

        _ = rospy.Subscriber("cluster/point", Point, self.point_callback)
        self.markers_pub = rospy.Publisher(
            'markers', MarkerArray, queue_size=1000)

        _ = rospy.Subscriber("cluster/request", Point, self.request_callback)
        self.circle_publisher = rospy.Publisher("cluster/goal", Point, queue_size=10)


    def is_circle_clusterer(self):
        return self.topic == "cluster/point"

    def request_callback(self, point):
        current_circle = self.kmeans.cluster_centers_[self.current_center_index]
        self.current_center_index += 1
        circle_target = Point()
        circle_target.x = current_circle[0]
        circle_target.y = current_circle[1]
        print("Publishing point: {}".format(circle_target))
        self.circle_publisher.publish(circle_target)

    def publish_markers(self):
        if hasattr(self.kmeans, "cluster_centers_"):
            markers = [self.point_2_marker(cluster_center, marker_id) for marker_id, cluster_center in
                       enumerate(self.kmeans.cluster_centers_)]
            print("Publishing {} markers.".format(len(markers)))
            self.markers_pub.publish(markers)

    def point_2_marker(self, point_world, marker_id):
        pose = Pose()
        pose.position.x = point_world[0]
        pose.position.y = point_world[1]
        pose.position.z = 0.5
        marker = Marker()
        marker.header.stamp = rospy.Time(0)
        marker.header.frame_id = "map"
        marker.pose = pose
        marker.type = Marker.CUBE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.lifetime = rospy.Duration.from_sec(30)
        marker.id = marker_id
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = ColorRGBA(1, 0, 0, 1)
        return marker

    def point_callback(self, p_detect):
        p = [p_detect.x, p_detect.y]
        if len(self.data_points) > 0:
            self.data_points.append(p)
            self.kmeans.partial_fit(p)
            self.publish_markers()
        else:
            self.unfitted_data_points.append(p)
            if len(self.unfitted_data_points) >= self.num_clusters:
                print("Got enought points doing first partial fit")
                self.kmeans.partial_fit(np.array(self.unfitted_data_points))
                self.data_points = self.data_points + self.unfitted_data_points
                self.unfitted_data_points.clear()


if __name__ == '__main__':

    _ = Clusterer()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
