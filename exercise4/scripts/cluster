#!/usr/bin/env python
import roslib

roslib.load_manifest('exercise4')
import rospy
from geometry_msgs.msg import Point, Vector3, Pose
from util import point_distance
from data import ClusterPoint
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class Clusterer():

    def __init__(self):
        rospy.init_node('cluster')
        self.centers = []
        self.markers = MarkerArray()
        self.CENTER_THRESHOLD = 0.6
        self.MIN_CENTER_DETECTIONS = 10
        self.current_center_index = 0

        self.colors = [ColorRGBA(255, 0, 0, 1), ColorRGBA(255, 255, 0, 1), ColorRGBA(0, 0, 255, 1)]

        _ = rospy.Subscriber("cluster/point", Point, self.point_callback)
        self.markers_pub = rospy.Publisher(
            'markers', MarkerArray, queue_size=1000)


        _ = rospy.Subscriber("cluster/request", Point, self.request_callback)
        self.circle_publisher = rospy.Publisher("cluster/goal", Point, queue_size=10)


    def request_callback(self, point):
        by_n = sorted(self.centers, key=lambda center: center.n, reverse=True)

        print(by_n)
        current_circle = by_n[self.current_center_index]
        print(current_circle)

        self.current_center_index += 1

        circle_target = Point()
        circle_target.x = current_circle.x
        circle_target.y = current_circle.y

        print("Publishing point: {}".format(circle_target))
        self.circle_publisher.publish(circle_target)


    def publish_markers(self):
        by_n = sorted(self.centers, key=lambda center: center.n, reverse=True)
        markers = [self.point_2_marker(p, ix) for (ix, p) in enumerate(by_n[:3])]
        print("Publishing {} markers.".format(len(markers)))
        self.markers_pub.publish(markers)

    def point_2_marker(self, point_world, ix):

        pose = Pose()
        pose.position.x = point_world.x
        pose.position.y = point_world.y
        pose.position.z = 0.5
        marker = Marker()
        marker.header.stamp = rospy.Time(0)
        marker.header.frame_id = "map"
        marker.pose = pose
        marker.type = Marker.CUBE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.lifetime = rospy.Duration.from_sec(30)
        marker.id = ix
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = self.colors[ix - 1]
        return marker

    def point_callback(self, p):

        closest_center = None
        min_dist = 999999999
        ix = 0

        for center_ix, center in enumerate(self.centers):
            dist = point_distance(p, center)
            if dist < min_dist and dist < self.CENTER_THRESHOLD:
                if closest_center:
                    print("Detected in multiple centers")

                closest_center = center
                min_dist = dist
                ix = center_ix

        if closest_center:
            new_center = closest_center.move_center(p)
            self.centers[ix] = new_center
        else:
            self.centers.append(ClusterPoint(p.x, p.y, 1))
            print("Adding new center")

        self.publish_markers()


if __name__ == '__main__':

    _ = Clusterer()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
