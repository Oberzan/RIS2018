#!/usr/bin/env python
from __future__ import print_function

# roslib.load_manifest('exercise4')
import sys

import cv2
import numpy as np
import pytesseract
import pyzbar.pyzbar as pyzbar
import rospy
import tf2_ros
from cv_bridge import CvBridge, CvBridgeError
from geometry_msgs.msg import Point, PointStamped, Pose, Vector3
from sensor_msgs.msg import Image
from std_msgs.msg import ColorRGBA, String
from visualization_msgs.msg import Marker, MarkerArray

dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)

# The object that we will pass to the markerDetect function
params = cv2.aruco.DetectorParameters_create()

# To see description of the parameters
# https://docs.opencv.org/3.3.1/d1/dcd/structcv_1_1aruco_1_1DetectorParameters.html

# You can set these parameters to get better marker detections
params.adaptiveThreshConstant = 25
adaptiveThreshWinSizeStep = 2


class The_Ring:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)
        self.engine_state = "default"

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        self.img_id = 1

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        self.depth_sub = rospy.Subscriber(
            "/camera/depth_registered/image_raw", Image, self.depth_callback)
        self.image_sub = rospy.Subscriber(
            "/camera/rgb/image_color", Image, self.image_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher(
            'markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

        self.cluster_publisher = rospy.Publisher(
            'cluster/point', Point, queue_size=1000)

        # Subscriber to get state of our main engine
        self.engine_state_subscriber = rospy.Subscriber(
            "engine/status", String, self.engine_state_callback)

    def engine_state_callback(self, string_message):
        self.engine_state = string_message.data
        print("Received engine engine_state: {}".format(self.engine_state))

    def get_pose(self, e, dist):
        # Calculate the position of the detected ellipse
        k_f = 525  # kinect focal length in pixels
        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]
        angle_to_target = np.arctan2(elipse_x, k_f)
        # Get the angles in the base_link relative coordinate system
        x, y = dist * np.cos(angle_to_target), dist * np.sin(angle_to_target)
        return (x, y)

    def post_position(self, x, y, color=ColorRGBA(0, 0, 0, 0.9)):
        # Define a stamped message for transformation
        point_s = PointStamped()
        point_s.point.x = x
        point_s.point.y = y
        point_s.point.z = 0.3
        point_s.header.frame_id = "base_link"
        point_s.header.stamp = rospy.Time(0)

        if abs(x) < 0.01 and abs(y) < 0.01:
            return

        # Get the point in the "map" coordinate system
        point_world = self.tf_buf.transform(point_s, "map")

        # Create a Pose object with the same position
        pose = Pose()
        pose.position.x = point_world.point.x
        pose.position.y = point_world.point.y
        pose.position.z = point_world.point.z

        # Create a marker used for visualization
        self.marker_num += 1
        marker = Marker()
        marker.header.stamp = point_world.header.stamp
        marker.header.frame_id = point_world.header.frame_id
        marker.pose = pose
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.lifetime = rospy.Duration.from_sec(30)
        marker.id = self.marker_num
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = color
        self.marker_array.markers.append(marker)

        self.cluster_publisher.publish(marker)
        self.markers_pub.publish(self.marker_array)

    def image_callback(self, data):
        # if not self.engine_state == "observing":
        #    return

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
        self.dims = cv_image.shape

        # self.cropImage(cv_image, 120, 320)

        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        img = cv2.equalizeHist(gray)

        thresha = cv2.adaptiveThreshold(
            img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 23, 25)

        _, contoura, _ = cv2.findContours(
            thresha, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        circles = self.find_circles(contoura)

        print("Circles: ", len(circles))

        for c in circles:
            e1 = c[0]
            e2 = c[1]
            size = (c[0][1][0] + c[0][1][1]) / 2
            center = (e1[0][1], e1[0][0])
            x1 = int(center[0] - size / 2)
            x2 = int(center[0] + size / 2)

            x_min = x1 if x1 > 0 else 0
            x_max = x2 if x2 < cv_image.shape[0] else cv_image.shape[0]

            y1 = int(center[1] - size / 2)
            y2 = int(center[1] + size / 2)

            y_min = y1 if y1 > 0 else 0
            y_max = y2 if y2 < cv_image.shape[1] else cv_image.shape[1]

            median = np.median(self.depth_image[x_min:x_max, y_min:y_max])
            x, y = self.get_pose(e1, float(median) / 1000.0)
            warped_image = self.warp(circles, cv_image)
            if not warped_image is None:
                circle_color = self.circle_color(warped_image)
                # print(circle_color)
                self.extract_data(warped_image)
                # self.post_position(x,y,circle_color)
                cv2.imshow('Warped image', warped_image)
                cv2.waitKey(1)
            # else:
            # self.post_position(x,y)

            cv2.ellipse(cv_image, e1, (0, 255, 0), 2)
            cv2.ellipse(cv_image, e2, (0, 255, 0), 2)

        # cv2.imshow('cvimage',cv_image)
        # cv2.waitKey(1)

    def circle_color(self, image):
        topleft = image[0][0]
        bottomleft = image[image.shape[0] - 1][0]
        topright = image[0][image.shape[1] - 1]
        bottomright = image[image.shape[0] - 1][image.shape[1] - 1]
        matrix = np.array([topleft, topright, bottomleft, bottomright])
        means = np.mean(matrix, axis=0)
        return ColorRGBA(means[2], means[1], means[0], 1)

    def extract_data(self, warped_image):
        data = self.extract_qr(warped_image)
        if not data:
            data = self.extract_digits(warped_image)
        if not data:
            data = self.extract_slope(warped_image)

        if data:
            print(data)
        else:
            print("Found no data!")

        return data

    def extract_qr(self, warped_image):
        decodedObjects = pyzbar.decode(warped_image)
        if len(decodedObjects) != 1:
            return None
        data = decodedObjects[0].data
        points = data.split(";")
        xy = [map(float, point.split("_")) for point in points]


        print("---------QR DETECTED---------")
        return {"k": None, "points": xy}

    def extract_digits(self, warped_image):
        config = '--psm 10 --eom 3 -c tessedit_char_whitelist=0123456789'
        text = pytesseract.image_to_string(warped_image[60:-60, :, :], config=config)
        text = text.strip()
        #print(text)
        if len(text) == 2:
            x = int(text[0])
            y = int(text[1])
            print("---------DIGITS DETECTED---------")
            return {"k": None, "points": [[x, y]]}
        else:
            return None

    def extract_slope(self, warped_image):
        image = warped_image
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        image = cv2.medianBlur(image, 5)
        image = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        kernel = np.ones((7, 7), np.uint8)
        image = cv2.erode(image, kernel, iterations=2)
        image = cv2.dilate(image, kernel, iterations=2)
        (n, out, stats, centers) = cv2.connectedComponentsWithStats(255 - image, 4, cv2.CV_32S)
        if n < 3:
            return None
        sorted_objects = np.argsort(stats[:, -1])
        l1_ix = sorted_objects[-2]
        l2_ix = sorted_objects[-3]
        if centers[l1_ix][1] > centers[l2_ix][1]:
            upper_line = out == l2_ix
            lower_line = out == l1_ix
        else:
            upper_line = out == l1_ix
            lower_line = out == l2_ix

        true_points_u = np.where(upper_line)
        h = len(upper_line)
        if len(true_points_u[0]) > 3000 or len(true_points_u[0]) < 600 or abs(
                centers[l1_ix][0] - centers[l2_ix][0]) > 15:
            return None
        true_points_l = np.where(lower_line)
        if len(true_points_l[0]) > 3000 or len(true_points_l[0]) < 600:
            return None

        line = np.polyfit(true_points_u[1], h - true_points_u[0], 1)
        print("---------LINE DETECTED---------")
        return {"k": line[0], "points": []}

    def warp(self, candidates, cv_image):
        corners, ids, _ = cv2.aruco.detectMarkers(cv_image, dictm, parameters=params)
        if ids is None or len(ids) != 4:
            return None

        # Increase proportionally if you want a larger image
        image_size = (700, 500, 3)
        marker_side = 100

        img_out = np.zeros(image_size, np.uint8)
        out_pts = np.array([[marker_side / 2, img_out.shape[0] - marker_side / 2],
                            [img_out.shape[1] - marker_side / 2, img_out.shape[0] - marker_side / 2],
                            [marker_side / 2, marker_side / 2],
                            [img_out.shape[1] - marker_side / 2, marker_side / 2]])

        src_points = np.zeros((4, 2))
        cens_mars = np.zeros((4, 2))
        for idx in ids:
            # Calculate the center point of all markers
            cors = np.squeeze(corners[idx[0] - 1])
            cen_mar = np.mean(cors, axis=0)
            cens_mars[idx[0] - 1] = cen_mar
            cen_point = np.mean(cens_mars, axis=0)

        for coords in cens_mars:
            #  Map the correct source points
            if coords[0] < cen_point[0] and coords[1] < cen_point[1]:
                src_points[2] = coords
            elif coords[0] < cen_point[0] and coords[1] > cen_point[1]:
                src_points[0] = coords
            elif coords[0] > cen_point[0] and coords[1] < cen_point[1]:
                src_points[3] = coords
            else:
                src_points[1] = coords

        h, status = cv2.findHomography(src_points, out_pts)
        img_out = cv2.warpPerspective(cv_image, h, (img_out.shape[1], img_out.shape[0]))
        img_out = img_out[200:500, 100:400, :]
        return img_out

    def find_circles(self, contours):
        elps = [cv2.fitEllipse(cnt) for cnt in contours if cnt.shape[0] >= 20]
        circles = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                circles += self.isCircle(elps[n], elps[m])
        return circles

    def isCircle(self, e1, e2):
        (x1, y1), (minoraxis1, majoraxis1), angle1 = e1
        (x2, y2), (minoraxis2, majoraxis2), angle2 = e2
        if (0.22 < abs(majoraxis1 / majoraxis2 - 1) < 0.32 and
                0.22 < abs(minoraxis1 / minoraxis2 - 1) < 0.32 and
                abs(minoraxis1 / majoraxis2 - 1) < 0.65 and
                abs(majoraxis1 / minoraxis2 - 1) < 0.35 and
                20 < minoraxis1 and
                np.sqrt(((x1 - x2) ** 2 + (y1 - y2) ** 2)) < 5):
            return [(e1, e2)]
        return []

    def depth_callback(self, data):
        try:
            self.depth_image = self.bridge.imgmsg_to_cv2(data, "16UC1")
        except CvBridgeError as e:
            print(e)


def main(args):
    _ = The_Ring()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
