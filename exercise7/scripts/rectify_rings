#!/usr/bin/env python
from __future__ import print_function

import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import ColorRGBA
from cv_bridge import CvBridge, CvBridgeError

dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)

# The object that we will pass to the markerDetect function
params = cv2.aruco.DetectorParameters_create()

print(params.adaptiveThreshConstant)
print(params.adaptiveThreshWinSizeMax)
print(params.adaptiveThreshWinSizeMin)
print(params.minCornerDistanceRate)
print(params.adaptiveThreshWinSizeStep)

# To see description of the parameters
# https://docs.opencv.org/3.3.1/d1/dcd/structcv_1_1aruco_1_1DetectorParameters.html

# You can set these parameters to get better marker detections
params.adaptiveThreshConstant = 25
adaptiveThreshWinSizeStep = 2


class The_Rectifier:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber(
            "/camera/rgb/image_color", Image, self.image_callback)

    def image_callback(self, data):
        # print('Iam here!')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        self.cropImage(cv_image, 120, 320)

        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        img = cv2.equalizeHist(gray)

        thresha = cv2.adaptiveThreshold(
            img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 23, 25)

        _, contoura, _ = cv2.findContours(
            thresha, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        candidates = self.find_candidates(contoura)

        ###########################################
        # THIS IS THE CODE THAT IT IS RELEVANT TO YOU
        # IT SHOULD BE INCLUDED IN YOUR OWN FUNCTION FOR RING DETECTION
        ###########################################

        if len(candidates) == 1:
            print('Ring detected! (hopefully)')
            corners, ids, rejected_corners = cv2.aruco.detectMarkers(
                cv_image, dictm, parameters=params)

            # Increase proportionally if you want a larger image
            image_size = (351*2, 248*2, 3)
            marker_side = 50*2

            img_out = np.zeros(image_size, np.uint8)
            out_pts = np.array([[marker_side/2, img_out.shape[0]-marker_side/2],
                                [img_out.shape[1]-marker_side/2,
                                    img_out.shape[0]-marker_side/2],
                                [marker_side/2, marker_side/2],
                                [img_out.shape[1]-marker_side/2, marker_side/2]])

            src_points = np.zeros((4, 2))
            cens_mars = np.zeros((4, 2))

            if not ids is None:
                if len(ids) == 4:
                    print('4 Markers detected')

                    for idx in ids:
                        # Calculate the center point of all markers
                        cors = np.squeeze(corners[idx[0]-1])
                        cen_mar = np.mean(cors, axis=0)
                        cens_mars[idx[0]-1] = cen_mar
                        cen_point = np.mean(cens_mars, axis=0)

                    for coords in cens_mars:
                        #  Map the correct source points
                        if coords[0] < cen_point[0] and coords[1] < cen_point[1]:
                            src_points[2] = coords
                        elif coords[0] < cen_point[0] and coords[1] > cen_point[1]:
                            src_points[0] = coords
                        elif coords[0] > cen_point[0] and coords[1] < cen_point[1]:
                            src_points[3] = coords
                        else:
                            src_points[1] = coords

                    h, status = cv2.findHomography(src_points, out_pts)
                    img_out = cv2.warpPerspective(
                        cv_image, h, (img_out.shape[1], img_out.shape[0]))

                    cv2.imshow('Warped image', img_out)
                    cv2.waitKey(1)
                else:
                    print('The number of markers is not ok:', len(ids))
            else:
                 print('No markers found')

        elif len(candidates) == 0:
            print('No contours detected')
        else:
            print('Some contours detected, not sure if it is a ring', len(candidates))
            for elps in candidates:
                e1 = elps[0]
                e2 = elps[0]
                cv2.ellipse(cv_image, e1, (0, 255, 0), 3)
                cv2.ellipse(cv_image, e2, (0, 255, 0), 3)
            # cv2.imshow('Image',cv_image)
            # cv2.waitKey(1)


    def find_candidates(self, contours):
        elps = [cv2.fitEllipse(cnt) for cnt in contours if cnt.shape[0] >= 20]
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                candidates += self.isCircle2(elps[n], elps[m])
        return candidates

    def isCircle2(self, e1, e2):
        (x1, y1), (minoraxis1, majoraxis1), angle1 = e1
        (x2, y2), (minoraxis2, majoraxis2), angle2 = e2
        if (0.22 < abs(majoraxis1/majoraxis2-1) < 0.32 and
            0.22 < abs(minoraxis1/minoraxis2-1) < 0.32 and
            abs(minoraxis1/majoraxis2-1) < 0.65 and
            abs(majoraxis1/minoraxis2-1) < 0.35 and
            20 < minoraxis1 < 85 and
            np.sqrt(((x1 - x2) ** 2 + (y1 - y2) ** 2)) < 5):
            print(abs(majoraxis1/majoraxis2-1))
            print(abs(minoraxis1/minoraxis2-1))
            print(abs(minoraxis1/majoraxis2-1))
            print(abs(majoraxis1/minoraxis2-1))
            print(minoraxis1)
            print()
            return [(e1, e2)]
        return []

    def cropImage(self, cv_image, top, bottom):
        cv_image[0:top] = 0
        cv_image[bottom:] = 0


def main(args):

    ring_rectifier = The_Rectifier()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
