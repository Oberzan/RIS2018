#!/usr/bin/env python
import roslib
roslib.load_manifest('cluster')
import rospy
from geometry_msgs.msg import Point




class Clusterer():

    def __init__(self):
        rospy.init_node('cluster')
        self.points = set()


        _ = rospy.Subscriber("cluster/point", Point, self.point_callback)
        _ = rospy.Subscriber("cluster/request_target_proba", Point, self.request_callback)
        _ = rospy.Subscriber("cluster/request_target", Point, self.request_target)
        self.proba_publisher = rospy.Publisher("cluster/response_target_proba", Point, queue_size=10)


    def request_target(self, p):
        ## TODO ignore already detected ones
        ## Calculates nearest circle to robot
        self.proba_publisher.publish(p)


    def point_callback(self, p):
        self.points.add(p)
        print("Adding point: {} to points. Numebr of points: {}".format(p, len(self.points)))


    ## Return probability that a point is a circle
    ## (x,y) is Point, z is probability
    def request_callback(self, p):
        calculation = 20.0 ## Fancy clustering calculation
        p.z = calculation
        self.proba_publisher.publish(p)




if __name__ == '__main__':


    _ = Clusterer()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")