#!/usr/bin/env python

import roslib

roslib.load_manifest('exercise3')
import rospy
import cv2
from geometry_msgs.msg import Point
from move_base_msgs.msg import MoveBaseActionGoal
from util import erode_image, generate_goals, nearest_goal, point_distance
from draw import draw_with_goals


class GoalGenerator:


    def pointCallback(self, data):
        print("Got goal request!")
        if len(self.goals_left) == 0:
            print("All points visited!")
            self.pub.publish(None)


        new_goal, dist = nearest_goal(data, self.goals_left)
        self.goals_left.remove(new_goal)
        draw_with_goals(self.img, self.goals_left)


        print("Publishsing point:\n" + str(new_goal) +
              "\n at distance: " + str(dist))
        print("Remaining points: " + str(len(self.goals_left)) + "\n")

        self.pub.publish(new_goal)


    def circle_goal_viewpoint_request(self, estimated_circle_center):
        print("Got request for nearest point to circle: {}".format(estimated_circle_center))

        viewpoint = min(self.transformed_goals, key=lambda goal: point_distance(goal, estimated_circle_center))

        print("Calculated viewpoint at: {}".format(viewpoint))
        self.viewpoint_publisher.publish(viewpoint)





    def move_base_callback(self, move_base_goal):
        transformed = move_base_goal.goal.target_pose.pose.position
        print("Got transformed goal: {}".format(transformed))
        self.transformed_goals.append(transformed)


    def __init__(self):
        rospy.init_node('generate_path')

        rospy.Subscriber("/goal/request", Point, self.pointCallback)
        self.pub = rospy.Publisher(
            '/goal/response', Point, queue_size=10, latch=True)


        self.circle_nearest_subcriber = rospy.Subscriber("/request_viewpoint", Point, self.circle_goal_viewpoint_request)

        self.viewpoint_publisher = rospy.Publisher("/response_viewpoint", Point, queue_size=100)




        self.img = cv2.imread(rospy.get_param('~img'), 0)

        cv2.namedWindow('image', cv2.WINDOW_NORMAL)
        cv2.namedWindow("Erosion Demo", cv2.WINDOW_NORMAL)

        erosion_factor = rospy.get_param('~erosion')
        goal_step = rospy.get_param('~step')

        self.erosion = erode_image(self.img, erosion_factor)
        self.goals_left = generate_goals(self.erosion, goal_step, offset_x=7, offset_y=-2)
        self.all_goals = self.goals_left[:]


        self.transformed_goals = []


        _ = rospy.Subscriber("move_base/goal", MoveBaseActionGoal, self.move_base_callback)



        print("Generated {} goals".format(len(self.all_goals)))

        draw_with_goals(self.img, self.all_goals)
        cv2.imshow("Erosion Demo", self.erosion)

        while True:
            k = cv2.waitKey(0)
            if k == 27:
                cv2.destroyAllWindows()
                break


if __name__ == '__main__':
    _ = GoalGenerator()
