#!/usr/bin/env python

import roslib

roslib.load_manifest('exercise3')
import rospy
import cv2
from geometry_msgs.msg import Point
from util import erode_image, generate_goals, nearest_goal
from draw import draw_with_goals


class GoalGenerator:

    def pointCallback(self, data):
        new_goal, dist = nearest_goal(data, self.goals)
        self.goals.remove(new_goal)
        draw_with_goals(self.img, self.goals)

        print("Publishsing point:\n" + str(new_goal) +
              "\n at distance: " + str(dist))
        print("Remaining points: " + str(len(self.goals)) + "\n")

        self.pub.publish(new_goal)

    def __init__(self):
        rospy.init_node('generate_path')

        rospy.Subscriber("/goal/request", Point, self.pointCallback)
        self.pub = rospy.Publisher(
            '/goal/response', Point, queue_size=10, latch=True)

        self.img = cv2.imread(rospy.get_param('~img'), 0)

        cv2.namedWindow('image', cv2.WINDOW_NORMAL)
        cv2.namedWindow("Erosion Demo", cv2.WINDOW_NORMAL)

        erosion_factor = rospy.get_param('~erosion')
        goal_step = rospy.get_param('~step')

        self.erosion = erode_image(self.img, erosion_factor)
        self.goals = generate_goals(self.erosion, goal_step)

        print("Generated {} goals".format(len(self.goals)))

        draw_with_goals(self.img, self.goals)
        cv2.imshow("Erosion Demo", self.erosion)

        while True:
            k = cv2.waitKey(0)
            if k == 27:
                cv2.destroyAllWindows()
                break


if __name__ == '__main__':
    _ = GoalGenerator()
