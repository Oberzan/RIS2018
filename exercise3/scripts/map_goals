#!/usr/bin/env python

# from __future__ import print_function

import roslib

roslib.load_manifest('exercise3')
import sys
import rospy
from nav_msgs.msg import OccupancyGrid
import numpy as np
from geometry_msgs.msg import Point, Twist
from actionlib import SimpleActionClient
from move_base_msgs.msg import MoveBaseAction
from constants import ACTION_CLIENT_STATUSES, ROTATE_SPEED, ROTATE_ANGLE, GOAL_RESULT_TIMEOUT
from moves import rotate
from util import point_2_base_goal, flip


class MapGoals():

    def map_callback(self, data):
        print("Map callback")
        size_x = data.info.width
        size_y = data.info.height
        self.cv_map = np.zeros(shape=(size_y, size_x))

        if size_x < 3 or size_y < 3:
            print("Map size is only x: {}, y: {}. Not running map to image conversion".format(size_x, size_y))

        rows, columns = self.cv_map.shape

        if rows != size_y and columns != size_x:
            self.cv_map = np.array([size_y, size_x])

        self.map_resolution = data.info.resolution
        self.map_transform = data.info.origin


        grid = flip(np.reshape(data.data, (size_y, size_x)), 0)

        for i in range(size_y):
            for j in range(size_x):
                if grid[i][j] == -1:
                    self.cv_map[i][j] = 127
                elif grid[i][j] == 100:
                    self.cv_map[i][j] = 0
                elif grid[i][j] == 0:
                    self.cv_map[i][j] = 255
                else:
                    print('Error at i:' + str(grid[i][j]))

        p = Point(5.0, 2.0, 0.0)
        print("Requesting initial goal with: [x: {} y: {} y: {}]", p.x, p.y, p.z)
        self.goal_request_pub.publish(p)

    def transform_map_point(self, point):
        _, size_y = self.cv_map.shape
        transformed = Point(point.x * self.map_resolution + self.map_transform.position.x,
                            (size_y - point.y) * self.map_resolution + self.map_transform.position.y, 0)

        print("Transforming point [x: {} y: {} z: {}] -> [x: {} y: {} z :{}]".format(point.x, point.y, point.z,
                                                                                     transformed.x, transformed.y,
                                                                                     transformed.z))
        return transformed



    def goal_callback(self, point):
        if not point:
            print("All points visited!")
            ## TODO get robot location
            self.circle_request_publisher.publish(None)


        print("Goal callback")
        transformed = self.transform_map_point(point)
        move_base_goal = point_2_base_goal(transformed)

        self.action_client.send_goal(move_base_goal)
        self.action_client.wait_for_result(rospy.Duration(GOAL_RESULT_TIMEOUT))
        print("Action result: " + ACTION_CLIENT_STATUSES[self.action_client.get_state()])

        if ACTION_CLIENT_STATUSES[self.action_client.get_state()] == 'SUCCEEDED':
            print("Rotating for angle: {} with speed: {}".format(ROTATE_ANGLE, ROTATE_SPEED))
            rotate(self.velocity_publisher, ROTATE_SPEED, ROTATE_ANGLE)

        print("Requesting new goal")
        self.goal_request_pub.publish(point)

    def __init__(self):
        rospy.init_node('map_goals')
        self.action_client = SimpleActionClient("move_base", MoveBaseAction)
        self.action_client.wait_for_server()
        self.cv_map = None
        self.map_transform = None
        self.map_resolution = 0
        self.goal_request_pub = rospy.Publisher("goal/request", Point, queue_size=10)
        self.goal_response_sub = rospy.Subscriber("goal/response", Point, self.goal_callback)
        self.map_sub = rospy.Subscriber("map", OccupancyGrid, self.map_callback)
        self.velocity_publisher = rospy.Publisher('cmd_vel_mux/input/navi', Twist, queue_size=10)

        self.circle_target_subscriber = rospy.Subscriber("cluster/goal", Point, self.cluster_point_callback)
        self.circle_request_publisher = rospy.Publisher("cluster/request", Point, queue_size=10)


        self.viewpoint_publisher = rospy.Publisher("/request_viewpoint", Point, queue_size=10)
        self.viewpoint_subscriber = rospy.Subscriber("/request_response", Point, self.viewpoint_callback)



    def viewpoint_callback(self, viewpoint):
        move_base_goal = point_2_base_goal(viewpoint)

        self.action_client.send_goal(move_base_goal)
        self.action_client.wait_for_result(rospy.Duration(GOAL_RESULT_TIMEOUT))
        print("Action result: " + ACTION_CLIENT_STATUSES[self.action_client.get_state()])




    def cluster_point_callback(self, circle_point):
        print("Recieved and asking for viewpoint: {}".format(circle_point))
        self.viewpoint_publisher.publish(circle_point)






def main(args):
    _ = MapGoals()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")


if __name__ == '__main__':
    main(sys.argv)
