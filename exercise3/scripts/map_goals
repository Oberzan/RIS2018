#!/usr/bin/env python

# from __future__ import print_function

import roslib

roslib.load_manifest('exercise3')
import sys
import rospy
from nav_msgs.msg import OccupancyGrid
import numpy as np
from std_msgs.msg import String
from geometry_msgs.msg import Point, Twist, PoseArray, Pose
from nav_msgs.msg import Odometry
from actionlib import SimpleActionClient
from move_base_msgs.msg import MoveBaseAction
from constants import ACTION_CLIENT_STATUSES, ROTATE_SPEED, ROTATE_ANGLE, GOAL_RESULT_TIMEOUT, ROTATING, DEFAULT, MOVING, CIRCLE_APPROACHING, CIRCLE_APPROACHED
from moves import rotate
from util import point_2_base_goal, flip, orientation_vector, approached_target, angle_to_goal
from tf.transformations import euler_from_quaternion


class MapGoals():

    def map_callback(self, data):
        print("Map callback.")
        size_x = data.info.width
        size_y = data.info.height
        self.cv_map = np.zeros(shape=(size_y, size_x))

        if size_x < 3 or size_y < 3:
            print("Map size is only x: {}, y: {}. Not running map to image conversion.".format(size_x, size_y))

        rows, columns = self.cv_map.shape

        if rows != size_y and columns != size_x:
            self.cv_map = np.array([size_y, size_x])

        self.map_resolution = data.info.resolution
        self.map_transform = data.info.origin

        grid = flip(np.reshape(data.data, (size_y, size_x)), 0)

        for i in range(size_y):
            for j in range(size_x):
                if grid[i][j] == -1:
                    self.cv_map[i][j] = 127
                elif grid[i][j] == 100:
                    self.cv_map[i][j] = 0
                elif grid[i][j] == 0:
                    self.cv_map[i][j] = 255
                else:
                    print('Error at i:' + str(grid[i][j]))

        print("Map successfully saved.")

        p = Point(100.0, 15.0, 0.0)
        print("Requesting initial goal with: [x: {} y: {} y: {}]", p.x, p.y, p.z)
        self.goal_request_pub.publish(p)
        self.map_initialized_publisher.publish(p)

    def transform_map_point(self, point):
        _, size_y = self.cv_map.shape
        transformed = Point(point.x * self.map_resolution + self.map_transform.position.x,
                            (size_y - point.y) * self.map_resolution + (self.map_transform.position.y * self.map_resolution * 2), 0)

        print("Transforming point [x: {} y: {} z: {}] -> [x: {} y: {} z :{}]".format(point.x, point.y, point.z,
                                                                                     transformed.x, transformed.y,
                                                                                     transformed.z))
        return transformed

    def goal_callback(self, point):
        if point.z == -1337:
            print("All points visited! Requesting circle goal.")
            self.circle_request_publisher.publish(Point())
            return

        print("Goal callback")
        transformed = self.transform_map_point(point)
        move_base_goal = point_2_base_goal(transformed)

        self.action_client.send_goal(move_base_goal)
        self.action_client.wait_for_result(rospy.Duration(GOAL_RESULT_TIMEOUT))
        print("Action result: " + ACTION_CLIENT_STATUSES[self.action_client.get_state()])

        if ACTION_CLIENT_STATUSES[self.action_client.get_state()] == 'SUCCEEDED':
            print("ENTERING_ROTATE")
            rotate(self.velocity_publisher, ROTATE_SPEED, ROTATE_ANGLE, self.state_publisher)
            print("EXITING_ROTATE")


        while self.circle_to_visit_jobs:
            self.viewpoint_publisher.publish(self.circle_to_visit_jobs[0])
            self.circle_to_visit_jobs = self.circle_to_visit_jobs[1:]
            try:
                _ = rospy.wait_for_message("speaker/say", String)
                rospy.sleep(3)
            except Exception as e:
                print(e)

        if self.circles_detected < 3:
            print("Requesting new goal with state: {}".format(self.state))
            self.goal_request_pub.publish(point)

    def __init__(self):
        rospy.init_node('map_goals')
        self.action_client = SimpleActionClient("move_base", MoveBaseAction)
        self.action_client.wait_for_server()
        self.cv_map = None
        self.map_transform = None
        self.map_resolution = 0
        self.circles_detected = 0
        self.circle_rotating_rate = rospy.Rate(10)
        self.circle_to_visit_jobs = []
        self.state = DEFAULT

        self.map_initialized_publisher = rospy.Publisher("/map_initialized", Point, queue_size=10)
         # Publisher for requesting new map goal
         # Transform subscriber
        self.map_transforms_subscriber = rospy.Subscriber("/request_transforms", PoseArray, self.map_transforms_callback)
        # Transform publisher
        self.map_transform_publisher = rospy.Publisher("/response_transforms", PoseArray, queue_size=10)
        self.goal_request_pub = rospy.Publisher("goal/request", Point, queue_size=10)
        # Subscriber for map goals
        self.goal_response_sub = rospy.Subscriber("goal/response", Point, self.goal_callback)
        # Subscriber for map
        self.map_sub = rospy.Subscriber("map", OccupancyGrid, self.map_callback)
        # Subscriber for cluster circle location
        self.circle_target_subscriber = rospy.Subscriber("cluster/goal", Point, self.cluster_point_callback)
        # Subscriber for nearest point to circle (viewpoint)
        self.viewpoint_subscriber = rospy.Subscriber("/response_viewpoint", Point, self.viewpoint_callback)
        # Odom subscriber
        self.sub = rospy.Subscriber("/odom", Odometry, self.odom_callback)

        # Publisher for requesting a circle from cluster
        self.circle_request_publisher = rospy.Publisher("cluster/request", Point, queue_size=10)
       # Velocity publisher
        self.velocity_publisher = rospy.Publisher('cmd_vel_mux/input/navi', Twist, queue_size=10)
        # Publisher for requesting nearest point to a circle
        self.viewpoint_publisher = rospy.Publisher("/request_viewpoint", Point, queue_size=10)
        # Publisher for current state of map_goals
        self.state_publisher = rospy.Publisher("engine/status", String, queue_size=10)
        # Speaker publisher
        self.speaker_publisher = rospy.Publisher("speaker/say", String, queue_size=10)
        # Map initialized publisher
        


        print("MapGoals initialized.")


    def map_transforms_callback(self, pose_array):
        print("Map transforms callbask")

        transformed_poses = PoseArray()
        for pose in pose_array.poses:
            transformed_pose = Pose()
            transformed_pose.position = self.transform_map_point(pose.position)

            transformed_poses.poses.append(transformed_pose)

        print("PUBLISHING TRANSFORMED POINTS!")
        self.map_transform_publisher.publish(transformed_poses)








    def rotate_to_goal(self, viewpoint, goal):
        print("Rotating from viewpoint {}".format(viewpoint))
        print("Rotating to goal {}".format(goal))

        angle = angle_to_goal(viewpoint, goal)


        speed = Twist()
        while abs(angle - self.theta) > 0.1:
            speed.linear.x = 0.0
            speed.angular.z = 1
            self.velocity_publisher.publish(speed)
            self.circle_rotating_rate.sleep()
            print(angle, self.theta)

        speed.angular.z = 0.0
        self.velocity_publisher.publish(speed)

        print("Orientated to goal!.")


    def odom_callback(self, odometry):
        rot_q = odometry.pose.pose.orientation
        (roll, pitch, jaw) = euler_from_quaternion([rot_q.x, rot_q.y, rot_q.z, rot_q.w])
        # print("self.theta={}".format(jaw))
        self.theta = jaw

    def approach(self, viewpoint, target, orientation):
        print("Approaching...")
        closer_viewpoint = approached_target(viewpoint, orientation)
        move_base_goal = point_2_base_goal(closer_viewpoint, orientation=orientation)
        self.action_client.send_goal(move_base_goal)
        self.action_client.wait_for_result(rospy.Duration(GOAL_RESULT_TIMEOUT))
        print("Aproached circle!")
        print("Action result: " + ACTION_CLIENT_STATUSES[self.action_client.get_state()])


    def viewpoint_callback(self, viewpoint):
        #orientation = orientation_vector(viewpoint, self.current_circle_target)
        move_base_goal = point_2_base_goal(viewpoint)

        self.action_client.send_goal(move_base_goal)
        self.action_client.wait_for_result(rospy.Duration(GOAL_RESULT_TIMEOUT))
        print("Moved to viewpoint!")
        print("Action result: " + ACTION_CLIENT_STATUSES[self.action_client.get_state()])

        self.rotate_to_goal(viewpoint, self.current_circle_target)

        ## self.approach(viewpoint, self.current_circle_target, orientation)

        self.state = CIRCLE_APPROACHED

        say = String()
        say.data = "Circle detected"
        self.speaker_publisher.publish(say)
        rospy.sleep(3)

        self.circles_detected += 1

        if self.circles_detected == 3:
            say.data = "Die puny humans."
            self.speaker_publisher.publish(say)




    def cluster_point_callback(self, circle_point):
        self.current_circle_target = circle_point
        print("Received and asking for viewpoint: {}".format(circle_point))
        self.circle_to_visit_jobs.append(circle_point)
        self.state = CIRCLE_APPROACHING

        ## self.viewpoint_publisher.publish(circle_point)


def main(args):
    _ = MapGoals()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")


if __name__ == '__main__':
    main(sys.argv)
